#!/bin/bash

# HACK: EXWM requirement to work properly with gemacs script
if [ -n "$EXWM" ]; then
    function emacsclient {
        $(which emacsclient) -s exwm $@
    }
fi

has-frame () {
    emacsclient -n -e "(< 0 (length (cl-remove-if \
                                      (lambda (x) \
                                        (null (window-system x))) \
                                      (frame-list))))"
}

new-frame () {
    emacsclient -c -n -a "emacs" "$@"
}

open-frame () {
    emacsclient -n -a "emacs" "$@" # 2> /dev/null
}

raise-frames () {
    local fpath="$@"
    local fdir=`dirname $fpath > /dev/null || printf ''`
    local fname=`basename $fpath > /dev/null || printf ''`
    local fname_with_parent="$fdir/$fname"
    open-frame -e "(progn \
                      (mapcan (lambda (x) \
                               (when (window-system x) \
                                (progn (x-focus-frame x) \
                                       (raise-frame x)))) \
                              (frame-list)) \
                       (when (> (length \"$fname\") 0) \
                             (switch-to-buffer \
                                 (or (car (match-buffers \"${fname_with_parent}\")) (match-buffers \"$fname\") \
                                          \"$fname\"))))" > /dev/null
}

reopen-frame () {
    echo "Reopen frame"
    open-frame -e "(delete-frame nil)"
    new-frame
}

restart-emacs-openrc () {
    notify-send "Emacs daemon crashed :(" "Restarting via OpenRc"
    sudo "/etc/init.d/emacs.$(whoami)" restart
}

restart-emacs-systemd () {
    notify-send "Emacs daemon crashed :(" "Restarting via SystemD"
    systemctl --user emacs restart
}

emacs-server-running () {
    emacsclient -e '(+)'
}

restart-emacs () {
    if [[ -f /usr/bin/openrc ]]; then
        restart-emacs-openrc
    elif [[ ! `systemctl --user is-active --quiet emacs` ]]; then
        restart-emacs-systemd
    fi
}

main () {
    [[ `emacs-server-running` != "0" ]] && (restart-emacs || exit 0)

    if [ -n "$EXWM" ]; then
        open-frame "$@" 2> /dev/null
    elif [ "$(has-frame)" == "t" ]; then
        open-frame "$@"
        raise-frames "$@" || reopen-frame
    else
        new-frame "$@" 2> /dev/null
        raise-frames 1> /dev/null
    fi

}

main "$@"
